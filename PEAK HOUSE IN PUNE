Peak House 
There is a society in PUNE where everyone thinks that they have a taller house than their neighbors.  Consider all the house are in the same line, so everyone will have two neighbors on their left and right except the corner ones who have just one neighbor. Now you are given the task of giving the position of one such house which satisfies this condition of being taller than their neighbors.

Input format
First line contains an integer 
T
, no of test cases. Then follows 
T
 test cases. Each test case consists of two lines. First line contains 
N
 . Second lines contain 
N
 space separated integers.

Output format
Print 
T
 lines, each containing position of one such house. Consider the position starts from 
0
.

Constraints
1
<=
T
<=
10

1
<=
N
<=
2
∗
10
6

1
<=
A
[
i
]
<=
2
∗
10
6

Example
Input
2
4
5 10 20 15
5
50 40 30 20 10

Output
2
0




*SOLUTION*
import java.util.*;
  import java.io.*;
  
  public class Main {
    public static void main(String args[]) throws IOException {
      Scanner sc= new Scanner(System.in);
      int t = sc.nextInt();
      while(t--!=0){
        int n = sc.nextInt();
        int a[]= new int[n];
        
        for(int i=0;i<n;i++){
          a[i]=sc.nextInt();
        }
        int k = binary(a,0,n-1,n);
        if(k==-1){
          if(a[n-1]>a[n-2]){
            System.out.println(n-1);
          }
          else if(a[0]>a[1]){
            System.out.println(0);
          }
        }
        else{
          System.out.println(k);
        }
      }
    }

    public static int binary(int a[], int low, int high, int n){
      if(low>high){
        return -1;
      }
      int mid= low + (high-low)/2;
     if(mid>0 && mid<n-1){
      if((a[mid]>a[mid-1] && a[mid]>a[mid+1])){
        return mid;
      }
      
      else if(a[mid+1]>a[mid]){
       return binary(a,mid+1,high,n);
      }
     return  binary(a,low,mid,n);
     }
     return -1;
    }
  }
